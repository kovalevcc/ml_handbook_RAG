import os
import json
import streamlit as st

from retrieval.doc_loader import parse_html_with_langchain
from retrieval.text_splitter import split_documents
from retrieval.vectorstore import create_vectorstore
from model.llm_setup import get_llm
from embeddings.bge_embeddings import BGEEmbeddings
from langchain_community.vectorstores import FAISS
from model.rag_chain import create_rag_chain

DATA_DIR = "./data"
INDEX_PATH = "./faiss"
FILENAME2URL_PATH = os.path.join(DATA_DIR, "filename2url.json")


@st.cache_data(show_spinner=False)
def load_filename2url(path: str) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å filename->url –∏–∑ JSON"""
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)


@st.cache_data(show_spinner=False)
def get_vectorstore(index_path: str, data_dir: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ª–∏–±–æ –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å FAISS.
    –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å.
    """
    embeddings = BGEEmbeddings()

    if os.path.exists(index_path):
        vectorstore = FAISS.load_local(
            index_path, embeddings, allow_dangerous_deserialization=True
        )
    else:
        documents = parse_html_with_langchain(data_dir)
        split_docs = split_documents(documents)
        vectorstore = create_vectorstore(split_docs)
        vectorstore.save_local(index_path)

    return vectorstore


@st.cache_resource(show_spinner=False)
def get_llm_cached():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç LLM"""
    return get_llm()


def create_rag_chain_cached():
    """
    –°–æ–∑–¥–∞—ë—Ç RAG —Ü–µ–ø–æ—á–∫—É.
    """
    vectorstore = get_vectorstore(INDEX_PATH, DATA_DIR)
    retriever = vectorstore.as_retriever(
        search_type="similarity", search_kwargs={"k": 5})
    llm = get_llm_cached()
    return create_rag_chain(retriever, llm)


def process_query(question: str):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, –≤—ã–∑—ã–≤–∞–µ—Ç RAG-—Ü–µ–ø–æ—á–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    rag_chain = create_rag_chain_cached()
    response = rag_chain.invoke({"input": question})
    return response


# –û—Å–Ω–æ–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RAG–Ω–∞—Ä—ë–∫: –ü–æ–∏—Å–∫–æ–≤–∏–∫ –ø–æ ML —É—á–µ–±–Ω–∏–∫—É –Ø–Ω–¥–µ–∫—Å–∞",
    page_icon="üõ°Ô∏è",
    layout="centered",
)


# –°—Ç–∏–ª–∏
def set_custom_style():
    st.markdown(
        """
        <style>
        body {
            background-color: #f0f8ff;
            color: #021621;
        }

        .stForm {
            border: none !important;
            box-shadow: none !important;
            background: transparent !important;
            padding: 0 !important;
        }

        .stButton, .stFormSubmitButton {
            display: flex;
            justify-content: center;
        }
        .stButton>button, .stFormSubmitButton>button {
            background-color: #021621;
            color: white;
            padding: 18px 60px;
            border: none;
            border-radius: 10px;
            margin-top: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .stTextInput>div>div {
            border: none !important;
            padding: 0;
            box-shadow: none !important;
            background: transparent !important;
        }
        .stTextInput>div>div>input {
            border: 2px solid #003366;
            border-radius: 5px;
            text-align: center;
            display: flex;
            font-size: 18px;
            padding: 8px;
        }

        .vikings-theme {
            font-family: 'Georgia', serif;
            font-size: 24px;
            color: #021621;
            text-align: center;
            margin-bottom: 20px;
        }
        .center {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }
        .title {
            font-size: 35px;
            text-align: center;
            color: #021621;
        }
        .description {
            background-color: #021621;
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            align-items: center;
            flex-direction: column;
        }
        .descriptionfinal {
            background-color: #021621;
            color: white;
            padding: 20px;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .links {
            color: #144272;
            padding: 20px;
            text-align: center;
            align-items: center;
            flex-direction: column;
        }
        .text-center {
            text-align: center;
            font-size: 22px;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )


# –§–æ–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
def add_bg_from_url():
    st.markdown(
        f"""
         <style>
         .stApp {{
             background-image: url("https://i.imgur.com/uHB4Rne.png");
             background-attachment: fixed;
             background-size: cover
         }}
         </style>
         """,
        unsafe_allow_html=True,
    )


add_bg_from_url()


# –°–∞–º —Å–∞–π—Ç
def main():
    set_custom_style()

    st.markdown(
        """
        <div class="center">
            <img src="https://i.imgur.com/dLr3W5s.png" alt="RAG Logo" width="500">
        </div>
        """,
        unsafe_allow_html=True,
    )

    st.markdown(
        '<div class="title">üõ°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RAG–Ω–∞—Ä—ë–∫! üõ°Ô∏è</div>',
        unsafe_allow_html=True,
    )

    st.markdown(
        '<div class="text-center">–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—á–µ–±–Ω–∏–∫—É –Ø–Ω–¥–µ–∫—Å–∞ –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏, –∏ –º—ã –Ω–∞–π–¥–µ–º –¥–ª—è –≤–∞—Å –æ—Ç–≤–µ—Ç—ã!</div>',
        unsafe_allow_html=True,
    )
    filename2url = load_filename2url(FILENAME2URL_PATH)
    # –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    with st.form(key="question_form"):
        question = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ —Ç–∞–∫–æ–µ lazy learning?"
        )
        submit_question = st.form_submit_button("–ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç")

    if submit_question:
        if question.strip():
            with st.spinner("–ò—â–µ–º –æ—Ç–≤–µ—Ç..."):
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ RAG-—Ü–µ–ø–æ—á–∫–∏
                answer = process_query(question)
                # –ü–µ—á–∞—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
                st.success("–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω!")
                st.write(answer.get('answer', "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"))

                context_list = answer.get("context", [])

                if not context_list:
                    st.warning(
                        "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
                else:
                    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                    first_source = context_list[0].metadata.get("source", "")
                    # –ù–∞—Ö–æ–¥–∏–º URL
                    mapped_url = filename2url.get(
                        first_source, "URL not found")

                    st.write(f"–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ: [–ø–æ —Å—Å—ã–ª–∫–µ]({mapped_url})")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")

    st.markdown("</div>", unsafe_allow_html=True)

    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    st.markdown(
        """
    <div class="description">
        <h4>‚ùö‚ùö‚ùö –ß—Ç–æ —Ç–∞–∫–æ–µ RAG–Ω–∞—Ä—ë–∫? ‚ùö‚ùö‚ùö</h4>
        <p>RAG–Ω–∞—Ä—ë–∫ ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—á–µ–±–Ω–∏–∫–æ–º –Ø–Ω–¥–µ–∫—Å–∞ –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é (ML). –°–∏—Å—Ç–µ–º–∞ RAG–Ω–∞—Ä—ë–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ:</p>
        <ol>
            <li><b>–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —É—á–µ–±–Ω–∏–∫–µ –Ø–Ω–¥–µ–∫—Å–∞ –ø–æ ML:</b>
            RAG-—Å–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —É—á–µ–±–Ω–∏–∫–∞.</li>
            <li><b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–Ω—è—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b>
            –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.</li>
            <li><b>–£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</b>
            –í—Å–µ —ç—Ç–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ–º –∏ –ø—Ä–æ—Å—Ç–æ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞ Streamlit. </li>
        </ol>
        <h4>‚ùö‚ùö –ö–∞–∫ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? ‚ùö‚ùö</h4>
        <p>RAG–Ω–∞—Ä—ë–∫ ‚Äî —ç—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –û–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º. RAG–Ω–∞—Ä—ë–∫ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:</p>
        <ul>
            <li>–°—Ç—É–¥–µ–Ω—Ç–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.</li>
            <li>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –æ—Å–≤–µ–∂–∏—Ç—å –∑–Ω–∞–Ω–∏—è.</li>
            <li>–í—Å–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —É—á–µ–±–Ω–∏–∫–∞ –Ø–Ω–¥–µ–∫—Å–∞ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —á–∏—Ç–∞—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç.</li>
        </ul>
        <p><h4>‚ùö –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚ùö</h4>
        –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Ç–æ–¥ random forest. –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –Ω—É–∂–Ω—É—é –≥–ª–∞–≤—É –≤ —É—á–µ–±–Ω–∏–∫–µ, –≤—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞—ë—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–µ, –∏ –æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –∫—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Ç–µ–º–µ.</p>
    </div>
    """,
        unsafe_allow_html=True,
    )

    # –°—Å—ã–ª–∫–∏
    st.markdown(
        """
        <div class="links">
            <h4>·Ö†–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
            <p>Telegram: <a href="https://t.me/@VadimPanenko" target="_blank">@RagNarek</a></p>
            <p>Email: <a href="mailto:ragnarek@mail.ru">ragnarek2002@mail.ru</a></p>
            <p><a href="https://education.yandex.ru/handbook/ml" target="_blank">–£—á–µ–±–Ω–∏–∫ –Ø–Ω–¥–µ–∫—Å–∞ –ø–æ ML</a></p>
        </div>
        """,
        unsafe_allow_html=True,
    )

    # –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –±–ª–æ–∫
    st.markdown(
        """
    <div class="descriptionfinal">
            <img src="https://i.imgur.com/DRl1Fy2.png" alt="RAG Logo" width="500">
            <p>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É, –æ—Å–≤–æ–±–æ–∂–¥–∞—è —Å–≤–æ–µ –ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏–∑—É—á–∞–µ–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. <br> <br>RAG–Ω–∞—Ä—ë–∫ ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!</p>
    </div>
                  </div>
        """,
        unsafe_allow_html=True,
    )


if __name__ == "__main__":
    main()
